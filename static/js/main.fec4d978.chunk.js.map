{"version":3,"sources":["components/GameCard.js","components/Navbar.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["GameCard","props","react_default","a","createElement","className","onClick","makeFriend","id","sound","alt","name","src","image","Navbar","instructions","score","topScore","Footer","App","state","characters","currentFriends","shuffleChars","shuffledChars","_this","sort","Math","random","setState","this","_this2","components_Navbar","map","character","components_GameCard","key","components_Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAceA,MAZf,SAAkBC,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6CACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BC,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,GAAIP,EAAMQ,SACxFP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,EAAMU,KAAMC,IAAKX,EAAMY,YCW5BC,MAhBf,SAAgBb,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,2BAEVF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAMc,eAEbb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,oBAAYH,EAAMe,MAAlB,iBAAuCf,EAAMgB,aCFtCC,MARf,WACE,OACEhB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yCAChBH,EAAAC,EAAAC,cAAA,qCCyDSe,6MAtDbC,MAAO,CACLC,WAAYA,EACZL,MAAO,EACPC,SAAU,EACVK,eAAgB,GAChBP,aAAc,6CAOhBQ,aAAe,WACb,IAAMC,EAAgBC,EAAKL,MAAMC,WAAWK,KAAK,kBAAMC,KAAKC,SAAW,KACvEH,EAAKI,SAAS,CAACR,WAAYG,OAG7BjB,WAAa,SAAAC,GACXiB,EAAKF,eACM,KAAPf,EACFiB,EAAKI,SAAS,CAACP,eAAgB,GAAIN,MAAO,EAAGD,aAAc,uCAClDU,EAAKL,MAAME,iBAAmBd,GACvCiB,EAAKI,SAAS,CAACP,eAAgBd,EAAIQ,MAAOS,EAAKL,MAAMJ,MAAQ,EAAGD,aAAc,2BAC1EU,EAAKL,MAAMH,WAAaQ,EAAKL,MAAMJ,OACrCS,EAAKI,SAAS,CAACZ,SAAUQ,EAAKL,MAAMH,SAAW,KAGjDQ,EAAKI,SAAS,CAACP,eAAgB,GAAIN,MAAO,EAAGD,aAAc,iHAlB7De,KAAKP,gDAsBE,IAAAQ,EAAAD,KACP,OACE5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4B,EAAD,CAAQhB,MAAOc,KAAKV,MAAMJ,MAAOC,SAAUa,KAAKV,MAAMH,SAAUF,aAAce,KAAKV,MAAML,eACzFb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACZyB,KAAKV,MAAMC,WAAWY,IAAI,SAAAC,GAAS,OAClChC,EAAAC,EAAAC,cAAC+B,EAAD,CACE3B,GAAI0B,EAAU1B,GACd4B,IAAKF,EAAU1B,GACfG,KAAMuB,EAAUvB,KAChBE,MAAOqB,EAAUrB,MACjBN,WAAYwB,EAAKxB,iBAKzBL,EAAAC,EAAAC,cAACiC,EAAD,cAjDUC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fec4d978.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction GameCard(props) {\r\n  return (\r\n    <div className=\"col-lg-3 col-md-4 col-sm-6 col-xs-1 hover\">\r\n      <div className=\"card text-center m-1 p-1\" onClick={() => props.makeFriend(props.id, props.sound)}>\r\n        <div className=\"image-container\">\r\n          <img alt={props.name} src={props.image} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default GameCard;","import React from \"react\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar bg-dark text-white border\">\r\n      <div className=\"col-lg-4\">\r\n        <strong><h2>ClickEmDead</h2></strong>\r\n      </div>\r\n      <div className=\"col-lg-4\">\r\n        <h4>{props.instructions}</h4>\r\n      </div>\r\n      <div className=\"col-lg-4\">\r\n        <h4>Score: {props.score} | Top Score: {props.topScore}</h4>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"bg-dark text-center text-white border\">\r\n      <h4>ClickEmDead &copy; 2019</h4>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport characters from \"./Chars.json\";\nimport GameCard from \"./components/GameCard\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\n\nclass App extends React.Component {\n  state ={\n    characters: characters,\n    score: 0,\n    topScore: 0,\n    currentFriends: [],\n    instructions: \"Click an image to begin, but only once!\"\n  };\n\n  componentDidMount() {\n    this.shuffleChars();\n  };\n  \n  shuffleChars = () => {\n    const shuffledChars = this.state.characters.sort(() => Math.random() - 0.5);\n    this.setState({characters: shuffledChars});\n  }\n\n  makeFriend = id => {\n    this.shuffleChars();\n    if (id === 10) {\n      this.setState({currentFriends: [], score: 0, instructions: \"You picked Toby...never pick Toby!\"});\n    } else if (this.state.currentFriends !== id) {\n      this.setState({currentFriends: id, score: this.state.score + 1, instructions: \"You guessed correctly!\"});\n      if (this.state.topScore === this.state.score) {\n        this.setState({topScore: this.state.topScore + 1})\n      }\n    } else {\n      this.setState({currentFriends: [], score: 0, instructions: \"You guessed incorrectly!\"})\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.score} topScore={this.state.topScore} instructions={this.state.instructions}/>\n        <div className=\"container\">\n          <div className=\"row border bg-dark m-1\">\n            {this.state.characters.map(character => \n              <GameCard\n                id={character.id}\n                key={character.id}\n                name={character.name}\n                image={character.image}\n                makeFriend={this.makeFriend}\n              />\n            )}\n          </div>\n        </div>\n        <Footer/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}